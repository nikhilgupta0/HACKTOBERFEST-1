#include <iostream>
#include <vector>
#include <string>
#include <iomanip>

using namespace std;

// Task struct to hold task data
struct Task {
    string description;
    bool completed;
};

// Function to display the menu
void displayMenu() {
    cout << "\nTo-Do List Application\n";
    cout << "1. Add Task\n";
    cout << "2. View Tasks\n";
    cout << "3. Mark Task as Completed\n";
    cout << "4. Delete Task\n";
    cout << "5. Exit\n";
    cout << "Select an option: ";
}

// Function to display tasks
void displayTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks available.\n";
        return;
    }

    cout << "\nTask List:\n";
    cout << left << setw(5) << "ID" 
         << setw(30) << "Description" 
         << "Status\n";
    cout << string(50, '-') << "\n";

    for (size_t i = 0; i < tasks.size(); i++) {
        cout << left << setw(5) << i + 1 
             << setw(30) << tasks[i].description 
             << (tasks[i].completed ? "Completed" : "Pending") << "\n";
    }
}

int main() {
    vector<Task> tasks;
    int choice;

    do {
        displayMenu();
        cin >> choice;

        switch (choice) {
            case 1: {
                Task newTask;
                cout << "Enter task description: ";
                cin.ignore(); // To ignore the newline character
                getline(cin, newTask.description);
                newTask.completed = false;
                tasks.push_back(newTask);
                cout << "Task added successfully!\n";
                break;
            }
            case 2: {
                displayTasks(tasks);
                break;
            }
            case 3: {
                displayTasks(tasks);
                int taskId;
                cout << "Enter the task ID to mark as completed: ";
                cin >> taskId;

                if (taskId > 0 && taskId <= tasks.size()) {
                    tasks[taskId - 1].completed = true;
                    cout << "Task marked as completed!\n";
                } else {
                    cout << "Invalid task ID.\n";
                }
                break;
            }
            case 4: {
                displayTasks(tasks);
                int taskId;
                cout << "Enter the task ID to delete: ";
                cin >> taskId;

                if (taskId > 0 && taskId <= tasks.size()) {
                    tasks.erase(tasks.begin() + taskId - 1);
                    cout << "Task deleted successfully!\n";
                } else {
                    cout << "Invalid task ID.\n";
                }
                break;
            }
            case 5:
                cout << "Exiting the program. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}
